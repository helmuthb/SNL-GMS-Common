/*
 build.gradle
 Gradle build configuration for GMS development
 Maintained by: GMS System Team 
*/

buildscript {
    // Identify repositories and assign credentials
    repositories {
        maven {
            url "${artifactory_contextUrl}/sandbox_java_virtual"
            /*
             These are set in the gradle.properties file, which you
             SHOULD NOT MODIFY
             */
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }

    }
    dependencies {
        // ALL TO-LEVEL DEPENDENCIES ARE EXPLICITY IDENTIFIED HERE
        // Developers, YOU ***SHOULD*** MODIFY this section
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.6.2"
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.1"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6"
    }
}

apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

// Apply Gradle plugins here, if you need extra ones for your builds
allprojects {
    apply plugin: "com.jfrog.artifactory"
    apply plugin: "maven-publish"
    apply plugin: 'java'
    sourceCompatibility = 9
}

// Publishing settings
/*
 Developers SHOULD NOT MODIFY this section, this is
 maintained by the system team 
*/

// We only want to publish the subprojects.  Uncommenting the
// below will try to publish the main project, which is an empty JAR.
/*publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}*/

// Artifactory settings are used/set here
/*
 Developers SHOULD NOT MODIFY this section, this is
 maintained by the system team 
*/
artifactory {
    // The base Artifactory URL if not overridden by the publisher/resolver
    contextUrl = "${artifactory_contextUrl}"

    publish {
        repository {
            repoKey = 'sandbox_java_local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            publications('mavenJava')
        }
    }
    resolve {
        repository {
            repoKey = 'sandbox_java_virtual'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

subprojects {
    group 'gms.core.data-acquisition'
    version '0.0.13'

    // The below will publish each subproject.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

    dependencies {
        implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
        implementation 'org.apache.logging.log4j:log4j-core:2.8.2'
        implementation 'org.apache.commons:commons-lang3:3.6'
        ///////////////////////////////////////////////////////////////////
        testImplementation 'junit:junit:4.12'
        testImplementation 'org.mockito:mockito-core:2.9.0'
    }
}

project(':css-reader') {
    apply plugin: "java-library"
    dependencies {
        implementation 'com.github.ffpojo:ffpojo:1.0'
        implementation 'com.google.guava:guava:24.0-jre'
        implementation 'gms.utilities:waveman:0.0.1'
    }
}

project(':cssloader-client') {
    apply plugin: 'application'
    apply plugin: "java-library"
    mainClassName = 'gms.dataacquisition.cssloader.BatchLoader'

    run {
        if (System.getProperty("exec.args") != null) {
            args System.getProperty("exec.args").split()
        }
        // Set system properties that can be configured; setting all properties
        // (e.g. systemProperties System.getProperties())
        // makes this un-runnable in IntelliJ
        if (System.getProperty("serviceHost") != null) {
            System.out.println("service host!")
            systemProperty "serviceHost", System.getProperty("serviceHost")
        }
        if (System.getProperty("servicePort") != null) {
            systemProperty "servicePort", System.getProperty("servicePort")
        }
    }

    dependencies {
        implementation project(':css-reader')
        implementation project(':cssloader-osdgateway')
        implementation 'gms.shared.mechanisms.objectstoragedistribution:waveforms-commonobjects:0.0.30'
        implementation 'gms.shared.mechanisms.objectstoragedistribution:signaldetection-commonobjects:0.0.30'
        implementation 'com.netflix.archaius:archaius-core:0.7.6'
        implementation 'args4j:args4j:2.33'
    }
}

project(':cssloader-osdgateway') {
    apply plugin: "java-library"
    dependencies {
        implementation 'com.mashape.unirest:unirest-java:1.4.9'
        implementation 'gms.shared.mechanisms.objectstoragedistribution:waveforms-commonobjects:0.0.30'
        api 'gms.shared.mechanisms.objectstoragedistribution:osd-common:0.0.30'
        implementation 'gms.shared.mechanisms.objectstoragedistribution:signaldetection-commonobjects:0.0.30'
        implementation 'org.msgpack:jackson-dataformat-msgpack:0.7.1'
    }
}

project(':cssloader-osdgateway-service') {
    apply plugin: 'application'
    mainClassName = 'gms.dataacquisition.cssloader.osdgateway.service.Application'

    dependencies {
        implementation project(':cssloader-osdgateway')
        implementation 'gms.shared.mechanisms.objectstoragedistribution:waveforms-repository:0.0.30'
        implementation 'gms.shared.mechanisms.objectstoragedistribution:signaldetection-repository:0.0.30'
        implementation 'gms.shared.mechanisms.objectstoragedistribution:stationreference-repository:0.0.30'
        implementation 'com.sparkjava:spark-core:2.6.+'
        implementation 'com.netflix.archaius:archaius-core:0.7.6'
        testImplementation 'com.mashape.unirest:unirest-java:1.4.9'
    }
}

project(':css-stationref-loader') {
    apply plugin: 'application'
    mainClassName = 'gms.dataacquisition.cssloader.stationref.Application'

    run {
        if (System.getProperty("exec.args") != null) {
            args System.getProperty("exec.args").split()
        }
        // Set system properties that can be configured; setting all properties
        // (e.g. systemProperties System.getProperties())
        // makes this un-runnable in IntelliJ
        if (System.getProperty("serviceHost") != null) {
            systemProperty "serviceHost", System.getProperty("serviceHost")
        }
        if (System.getProperty("servicePort") != null) {
            systemProperty "servicePort", System.getProperty("servicePort")
        }
    }

    dependencies {
        implementation project(':css-reader')
        implementation project(':cssloader-osdgateway')
        implementation 'gms.shared.mechanisms.objectstoragedistribution:stationreference-commonobjects:0.0.30'
        implementation 'com.netflix.archaius:archaius-core:0.7.6'
        implementation 'args4j:args4j:2.33'
    }
}
